#ifndef INTERNALS_HPP
#define INTERNALS_HPP

#include "config.hpp"

enum modif : u16
{
    shift = 1 << 0,
    lock = 1 << 1,
    ctrl = 1 << 2,
    mod1 = 1 << 3,
    mod2 = 1 << 4,
    mod3 = 1 << 5,
    mod4 = 1 << 6,
    mod5 = 1 << 7,
};

struct key
{
    /// The utf32 codepoint for the keypress, or 0 if none codept is associated
    /// with the keypress. Characters like esc, return, etc are not stored as
    /// codepoints. For them the codepoint is set to 0, and (TODO: fieldname) is
    /// used.
    u32 codept;

    // In order to use this field codept must be set to 0. This is the code of
    // the special key like escape, arrow, etc.
    u16 keycode;

    // The modifier mask.
    u16 mod_mask;
};

// TODO: This depends on xmodmap and is just basic placeholder.
static char const* modif_names[] = {
    "Shift",
    "Caps_Lock",
    "Control",
    "Alt_L",
    "Num_Lock",
    "",
    "Super"
    "Alt_R"
};

// The list of special keys, not treated as insertable text, though we store
// them in the keypress differently than storing its utf32 value (sometimes they
// don't have one). "" means that the key is not supported. They keys (and their
// names) come from xlibs keysymdef.h. The difference is that the original
// keysyms must be bitwise-and'ed with 0xFF.
static char const* keycode_names[] = {
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "BackSpace",
    "Tab",
    "Linefeed",
    "Clear",
    "",
    "Return",
    "",
    "",
    "",
    "",
    "",
    "Pause",
    "Scroll_Lock",
    "Sys_Req",
    "",
    "",
    "",
    "",
    "",
    "Escape",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Home",
    "Left",
    "Up",
    "Right",
    "Down",
    "Prior",
    "Page_Down",
    "End",
    "Begin",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Select",
    "Print",
    "Execute",
    "Insert",
    "",
    "Undo",
    "Redo",
    "Menu",
    "Find",
    "Cancel",
    "Help",
    "Break",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "script_switch",
    "Num_Lock",
    "", // "KP_Space",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "KP_Tab",
    "",
    "",
    "",
    "KP_Enter",
    "",
    "",
    "",
    "KP_F1",
    "KP_F2",
    "KP_F3",
    "KP_F4",
    "KP_Home",
    "KP_Left",
    "KP_Up",
    "KP_Right",
    "KP_Down",
    "KP_Prior",
    "KP_Page_Down",
    "KP_End",
    "KP_Begin",
    "KP_Insert",
    "KP_Delete",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "", // "KP_Multiply",
    "", // "KP_Add",
    "", // "KP_Separator",
    "", // "KP_Subtract",
    "", // "KP_Decimal",
    "", // "KP_Divide",
    "", // "KP_0",
    "", // "KP_1",
    "", // "KP_2",
    "", // "KP_3",
    "", // "KP_4",
    "", // "KP_5",
    "", // "KP_6",
    "", // "KP_7",
    "", // "KP_8",
    "", // "KP_9",
    "",
    "",
    "",
    "", // "KP_Equal",
    "F1",
    "F2",
    "F3",
    "F4",
    "F5",
    "F6",
    "F7",
    "F8",
    "F9",
    "F10",
    "F11",
    "F12",
    "F13",
    "F14",
    "F15",
    "F16",
    "F17",
    "F18",
    "F19",
    "F20",
    "F21",
    "F22",
    "F23",
    "F24",
    "F25",
    "F26",
    "F27",
    "F28",
    "F29",
    "F30",
    "F31",
    "F32",
    "F33",
    "F34",
    "F35",
    "Shift_L",
    "Shift_R",
    "Control_L",
    "Control_R",
    "Caps_Lock",
    "Shift_Lock",
    "Meta_L",
    "Meta_R",
    "Alt_L",
    "Alt_R",
    "Super_L",
    "Super_R",
    "Hyper_L",
    "Hyper_R",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "Delete",
};

#endif // INTERNALS_HPP
